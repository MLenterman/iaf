<Module>
	<!-- Trigger to scan file system running with cron schedule sends the directory to be scanned as input-->
	<Job
		active="${active.mfh.renamefiles}"
		name="TriggerMFHRenameFiles"
		cronExpression="${trigger.mfh.scheduled.job.cron}"
		function="SendMessage"
		javaListener="MFH rename files listener"
		message="${currentflow.rootdir}/in"
	>
		<Locker
			name="TriggerMFHRenameFiles"
			objectId="TriggerMFHRenameFiles"
			ignoreTableNotExist="true"
		/>
	</Job>

<!-- Adapter to create the trigger message that will be stored in database.
	Uses createTriggerMessage.xsl file to create the message. The message format can be adjusted with the xsl 
	Has a directory listener which scans the fixed inputFolder to detect files. 
	wildcard can be set in the directoryListener to filter files. 
-->

	<Adapter name="MFHIn" active="${active.mfh}">
		<Receiver pollInterval="${currentflow.pollInterval}"> 
			<DirectoryListener
				minStableTime ="${currentflow.minstabletime}"
				fileTimeSensitive="true"
				name="MFHIn"
				messageType="info"
				root="${currentflow.rootdir}"
				inputFolder="in"
				inProcessFolder="${currentflow.inprocess}"
				errorFolder="error"
				createFolders="true"
				wildcard="${currentflow.wildcard}"
			/>
		</Receiver>
		<Pipeline>
			<Exit path="EXIT" state="success" />
			
			<XsltPipe
				name="wrapInput"
				styleSheetName="MFH/xsl/createTriggerMessage.xsl"
				storeResultInSessionKey="triggerMessage"
			>
				<Param name="CanonicalName" xpathExpression="file/@canonicalName" />
				<Param name="Filename" xpathExpression="file/@name" />
				<Param name="MFHFlowId" value="${currentflow.mfhflowid}" /> 
				<Param name="FlowId" value="${currentflow.flowid}" /> <!-- Can be hardcoded or retrieved from the filename depending on the new design-->
				<Param name="originalFilename" sessionKey="originalFilename" /> <!-- without timestamp suffix -->
				<Param name="LocalTransactionID" sessionKey="cid" />
			</XsltPipe>

			<SenderPipe 
				name="insertPipe"
			>
				<FixedQuerySender
					name="insertPipe"
					useNamedParams="true"
					query="INSERT INTO IBISFILETRIGGER (UNIQUEKEY, NAME, URI, CREATED_AT, SIZE, FLOWID, MESSAGE, STATUS, UPDATED_AT) VALUES (?{UNIQUEKEY}, ?{FILENAME}, ?{FILEURI}, NOW(), ?{FILESIZE}, ?{FLOWID}, ?{MESSAGE}, 1, NOW())"
					queryType="OTHER"
				>
					<Param name="UNIQUEKEY" sessionKey="originalMessage" xpathExpression="file/@canonicalName" />
					<Param name="FILENAME" sessionKey="originalMessage" xpathExpression="file/@name" />
					<Param name="FILEURI" sessionKey="originalMessage" xpathExpression="file/@canonicalName" />
					<Param name="FILESIZE" sessionKey="originalMessage" xpathExpression="file/@size" />
					<Param name="FLOWID" sessionKey="triggerMessage" xpathExpression="/Message/LegacyMessage/OnCompletedTransferNotify_Action/TransferFlowId"/>
					<Param name="MESSAGE" sessionKey="triggerMessage" type="xml" />
				</FixedQuerySender>
			</SenderPipe>
		</Pipeline>
	</Adapter>

<!-- Adapter that will be triggered by a job. After trigger it will rename the files with mfh- prefix. 
	In this adapter an wildcard is required to filter the files that will be processed with this adapter. 
-->
	<Adapter name="MFH rename files" active="${active.mfh.renamefiles}">
		<Receiver>
			<JavaListener name="MFH rename files listener"/>
		</Receiver>

		<Pipeline>
			<Exit state="success" path="EXIT"/>
			<LocalFileSystemPipe 
				name="scanFolder" 
				action="list"
				excludeWildcard="mfh-*"
				wildcard="${mfh.renamefiles.wildcard}"
				createFolder="true"
			/>

			<ForEachChildElementPipe 
				name="IterateOverFiles" 
				targetElement="file" 
			>
				<LocalFileSystemSender 
					action="rename"
					createFolder="true"
				>
					<Param name="filename" xpathExpression="/file/@canonicalName"/>
					<Param name="destination" xpathExpression="concat(substring-before(/file/@canonicalName, file/@name),$prefix, file/@name)">
						<Param name="prefix" value="${mfh.renamefiles.prefix}"/>
					</Param>
				</LocalFileSystemSender>

			</ForEachChildElementPipe>
		</Pipeline>
	</Adapter>
	
<!-- Adapter may process a message from the IBISFILETRIGGER table 
	Has a table listener listening to IBISFILETRIGGER table. 
	It is possible to specify a 'selectCondition' in table listener to retrieve only some of the records.
	For example selectCondition="FLOWID='NNX12345'
	Generates sessionKeys that can be used in the flow by parsing the message data 
-->
	<Adapter name="MFHProcessor">
		<Receiver>
			<JdbcTableListener
				name="IBISFILETRIGGER_listener"
				tableName="IBISFILETRIGGER"
				statusField="STATUS"
				timestampField="UPDATED_AT"
				statusValueAvailable="1"
				statusValueInProcess="2"
				statusValueProcessed="3"
				statusValueError="4"
				statusValueHold="5"
				keyField="UNIQUEKEY"
				messageField="MESSAGE"
			/>
		</Receiver>
		<Receiver> <!-- This could be called from the scheduled adapter-->
			<JavaListener name="processMessage" serviceName="ibis4test-processMessage"/>
		</Receiver>
		<Pipeline>
			<Exit state="success" path="EXIT"/>

<!-- The parameters can be extended with more information-->
			<PutParametersInSessionPipe name="paramsInSession">
				<Param name="canonicalName" sessionKey="originalMessage" xpathExpression="/Message/CanonicalName"/>
				<Param name="filename" sessionKey="originalMessage" xpathExpression="/Message/Filename"/>
				<Param name="MFHFlowId" sessionKey="originalMessage" xpathExpression="/Message/MFHFlowId"/>
				<Param name="serverFileName" sessionKey="originalMessage" xpathExpression="/Message/CanonicalName"/>
				<Param name="flowId" sessionKey="originalMessage" xpathExpression="/Message/LegacyMessage/OnCompletedTransferNotify_Action/TransferFlowId"/>
				<Param name="clientFilename" sessionKey="originalMessage" xpathExpression="/Message/LegacyMessage/OnCompletedTransferNotify_Action/ClientFilename"/>
			</PutParametersInSessionPipe>
<!-- Some processing may be in place (XmlSwitchPipe switch between flows)-->


			<LocalFileSystemPipe name="Move to processed folder" action="move" createFolder="true">
				<Param name="filename" sessionKey="clientFilename"/>
				<Param name="destination" xpathExpression="concat(substring-before($clientFilename,$nameOfTheFile),'..\processed\')">
					<Param name="nameOfTheFile" sessionKey="filename"/>
					<Param name="clientFilename" sessionKey="clientFilename"/>
				</Param>
			</LocalFileSystemPipe>
			
		</Pipeline>
	</Adapter>

</Module>